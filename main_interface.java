/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package database;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Rectangle;
import java.io.*;
import java.sql.*;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.table.*;
/**
 *
 * @author Georgiy
 */
public class main_interface extends javax.swing.JFrame {

    // JDBC variables for opening and managing connection
    private static Connection con;
    private static Statement stmt;
    private static DatabaseMetaData dbmd;
    private static int countTables = 1;
    private static int countProcedure = 1;
    private DefaultTableModel mod;
    private boolean show_button = false;
    private  Vector<String> external_keys_vec;
    private String header_slave_table;
    // for save and change string
    private boolean addNewString = false;
    private boolean deleteString = false;
    private int count_header = 0;
    private int new_string = 0;
    private int old_string = 0;
    private Vector<String> old_data; 
    private Vector<String> new_data; 
    private Vector<String> headerVect;
    private int Limit = 5000;
    private int start_lim, end_lim;
    
    /**
     * Creates new form main_interface
     */
    public main_interface() {
        initComponents();
        // in the begining all functions to turned off, because we are not connected to BD
        jButton6.setEnabled(false);
        jButton7.setEnabled(false);
        jTable1.setEnabled(false);
        jComboBox1.setEnabled(false);
        jTextField2.setEnabled(false);
        jButton2.setEnabled(false);
        jButton4.setEnabled(false);
        jButton5.setEnabled(false);
        jButton3.setEnabled(false);
        jButton8.setEnabled(false); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jPasswordField1 = new javax.swing.JPasswordField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simple MySql client v1.001");
        setBackground(new java.awt.Color(51, 102, 0));

        jTextField1.setText("root");

        jLabel1.setText("login");

        jLabel2.setText("password");

        jLabel3.setText("DataBase");

        jTextField3.setText("chessclub_t");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jButton1.setText("connect");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "choose table" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel4.setText("table");

        jButton2.setText("show");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPasswordField1.setText("darktugrenok");

        jLabel7.setText("Query result");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                jTable1MouseWheelMoved(evt);
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                jTable1ComponentMoved(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(jTable1);

        jButton5.setText("disconnect");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("add");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton4.setText("save");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton7.setText("delete");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jTextField2.setText("2000");

        jButton3.setText("google");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel5.setText("key word");

        jButton8.setText("addiction");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(448, 448, 448)
                                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton5))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(38, 38, 38)
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(29, 29, 29)
                                        .addComponent(jLabel3)))
                                .addContainerGap(27, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton7))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(26, 26, 26)
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton2)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton3)
                                    .addComponent(jButton8))
                                .addGap(85, 85, 85))))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1)
                        .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton5)
                        .addComponent(jLabel1)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton8))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jButton2))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton6)
                                    .addComponent(jButton4)
                                    .addComponent(jButton7)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(jLabel7)))))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed
   
    /* connecting with BD */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
             // opening database connection to MySQL server
             con = DriverManager.getConnection("jdbc:mysql://localhost:3306/"+jTextField3.getText(), 
                    jTextField1.getText(), jPasswordField1.getText());
             stmt = con.createStatement();
             dbmd = con.getMetaData();

             // get list of the tables
             ResultSet rs2 = dbmd.getTables(null, null, null, null);
             while (rs2.next()) {
                     jComboBox1.addItem(rs2.getString(3));
                     countTables++;
             }

             // to turn on functions
             jTable1.setEnabled(true);
             jComboBox1.setEnabled(true);
             jButton5.setEnabled(true);
             jButton1.setEnabled(false);

        } catch (SQLException ex) {
             JFrame frame = new JFrame("JOptionPane showMessageDialog example");
             JOptionPane.showMessageDialog(frame,"Error 004: "+ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

// show
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // to turn update buttons
        show_button = true;
        jButton4.setEnabled(true);
        jButton6.setEnabled(true);
        jButton7.setEnabled(true);   
        jTextField2.setEnabled(true);
        jButton3.setEnabled(true);
        jButton8.setEnabled(false); 
        headerVect = new Vector<>();
        count_header = 0;
        old_string=0;
        try {
            ResultSet rs4 = dbmd.getColumns(null, null, (String) jComboBox1.getSelectedItem(), null);             // get header columns
            while (rs4.next()) {
                headerVect.add(rs4.getString(4));                                // save header
                count_header++;                                                  // header count
            }
        } catch (SQLException sqlEx) {
            sqlEx.printStackTrace();
        }

        mod = new DefaultTableModel(headerVect, 0);                             // set header
        jTable1.setModel(mod);                                                  // update table

        try {
            String query = "select * from " + jComboBox1.getSelectedItem() + " LIMIT 0,"+Limit+";", name;
            ResultSet rs = stmt.executeQuery(query);
            
            while (rs.next()) {                                                 // get data
                Vector<String> newRow = new Vector<>();
                for(int i = 1; i< count_header+1; i++){
                    newRow.add(rs.getString(i));                                // create string
                }
                mod.addRow(newRow);                                             // add string
            }
            
            // start init for table 
            jTable1 .getSelectionModel().setSelectionInterval(0, 0);            // choose fisrt string
            old_data = new Vector();
            for(int i=0;i<count_header;i++){                                    // save context for first string
               old_data.add((String) jTable1.getValueAt(old_string,i)); 
            }
            start_lim = Limit;
        } catch (SQLException ex) {
            JFrame frame = new JFrame("JOptionPane showMessageDialog example");
            JOptionPane.showMessageDialog(frame,"Error 003: "+ex);
           // Logger.getLogger(main_interface.class.getName()).log(Level.SEVERE, null, ex);
        }
      
    }//GEN-LAST:event_jButton2ActionPerformed

/*  Проверка корректности выбора таблицы*/
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        if(!jComboBox1.getSelectedItem().equals("choose table")){
            jButton2.setEnabled(true);
            jTextField2.setEnabled(true);
            jButton3.setEnabled(true);
        }else{ 
            jTextField2.setEnabled(false);
            jButton3.setEnabled(false);
            jButton2.setEnabled(false);
            jButton4.setEnabled(false);
            jButton6.setEnabled(false);
            jButton7.setEnabled(false);  
            mod = new DefaultTableModel(0, 0);
            jTable1.setModel(mod);
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

/* disconnect */
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
         try {
                if (stmt != null) {                         // check obkect BD
                     stmt.close();
                }

                // off all funcrions
                jButton6.setEnabled(false);  
                jButton7.setEnabled(false);
                jTable1.setEnabled(false);
                jComboBox1.setEnabled(false);
                jTextField2.setEnabled(false);
                jButton2.setEnabled(false);
                jButton4.setEnabled(false);
                jButton3.setEnabled(false);
                jButton5.setEnabled(false);
                jButton1.setEnabled(true);
                jButton8.setEnabled(false); 
                for(int i = 1; i<countTables;i++)           // delete list tables
                    jComboBox1.removeItemAt(1);
                // zeroing counter
                countTables = 1;
                countProcedure = 1;
            
                mod = new DefaultTableModel(0, 0);
                jTable1.setModel(mod);
           } catch (SQLException ex) {
                JFrame frame = new JFrame("JOptionPane showMessageDialog example");
                JOptionPane.showMessageDialog(frame,"Error 002: "+ex);
           }
    }//GEN-LAST:event_jButton5ActionPerformed

// add new string (button)
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        if(show_button){
            Vector<String> newRow = new Vector<>();
            mod.addRow(newRow);
            jTable1.setModel(mod);
            for(int i=0;i<count_header;i++){
                jTable1.setValueAt("null", jTable1.getRowCount()-1, i);
            }
            addNewString = true;
            jButton6.setEnabled(false);
        }
    }//GEN-LAST:event_jButton6ActionPerformed
 
// update or add rows (mouse click)
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
            new_string = jTable1.getSelectedRow();
            if(new_string != old_string){
                new_data = new Vector();
                for(int i=0;i<count_header;i++){
                   new_data.add((String) jTable1.getValueAt(old_string,i)); 
                }
                boolean go_request = false;
                for(int i = 0; i<count_header;i++ ){
                    if(!new_data.get(i).equals(old_data.get(i))){
                        go_request=true;
                        break;
                    }
                }
                if(go_request){
                    try {
                        if(addNewString && old_string == jTable1.getRowCount()-1 ){
                            String query = "INSERT INTO `" + jComboBox1.getSelectedItem() + "` ( ", name;
                            for(int i =0; i< count_header; i++){
                                query = query + (String)headerVect.get(i);
                                if(i+1<count_header)
                                     query = query +", ";
                            }
                            query = query +") VALUES ( ";
                            for(int i =0; i< count_header; i++){
                                query = query + "'"+(String)new_data.get(i)+"'";
                                if(i+1<count_header)
                                     query = query +" , ";
                            }
                            query = query +");";
                            boolean rs = stmt.execute(query);
                            addNewString = false;
                            jButton6.setEnabled(true);
                            System.out.println(rs);
                        }else{
                            // Generate request
                            String query = "update `" + jComboBox1.getSelectedItem() + "` set ", name;
                            for(int i =0; i< count_header; i++){
                                query = query + (String)headerVect.get(i)+" = '"+(String)new_data.get(i)+"'";
                                if(i+1<count_header)
                                     query = query +", ";
                            }
                            query = query +" where ";
                            for(int i =0; i< count_header; i++){
                                query = query + (String)headerVect.get(i)+" = '"+(String)old_data.get(i)+"'";
                                if(i+1<count_header)
                                     query = query +" and ";
                            }
                            query = query +";";
                            int rs = stmt.executeUpdate(query);
                            System.out.println("rs="+rs);
                        }
                    } catch (SQLException ex) {
                        JFrame frame = new JFrame("JOptionPane showMessageDialog example");
                        JOptionPane.showMessageDialog(frame,"Error 001: "+ex);
                        // return correct values
                        for(int i=0;i<count_header;i++){
                            jTable1.setValueAt(old_data.get(i), old_string, i);
                        }
                    }
                }
                old_string = new_string;
                old_data = new Vector();
                for(int i=0;i<count_header;i++){
                   old_data.add((String) jTable1.getValueAt(old_string,i)); 
                }
            }      
    }//GEN-LAST:event_jTable1MouseClicked

// save button
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if(show_button){
            new_string = jTable1.getSelectedRow();
            new_data = new Vector();
            for(int i=0;i<count_header;i++){
               new_data.add((String) jTable1.getValueAt(old_string,i)); 
            }
            boolean go_request = false;
            for(int i = 0; i<count_header;i++ ){
                if(!new_data.get(i).equals(old_data.get(i))){
                    go_request=true;
                    break;
                }
            }
            if(go_request){
                try {
                    // Generate request
                    //update `book` set cost = '250' where id = '2';*/
                    String query = "update `" + jComboBox1.getSelectedItem() + "` set ", name;
                    for(int i =0; i< count_header; i++){
                        query = query + (String)headerVect.get(i)+" = '"+(String)new_data.get(i)+"'";
                        if(i+1<count_header)
                             query = query +", ";
                    }
                    query = query +" where ";
                    for(int i =0; i< count_header; i++){
                        query = query + (String)headerVect.get(i)+" = '"+(String)old_data.get(i)+"'";
                        if(i+1<count_header)
                             query = query +" and ";
                    }
                    query = query +";";
                    int rs = stmt.executeUpdate(query);
                } catch (SQLException ex) {
                    //Logger.getLogger(main_interface.class.getName()).log(Level.SEVERE, null, ex);
                    JFrame frame = new JFrame("JOptionPane showMessageDialog example");
                    JOptionPane.showMessageDialog(frame,"Error 005: "+ex);
                    // return correct values
                    for(int i=0;i<count_header;i++){
                        jTable1.setValueAt(old_data.get(i), old_string, i);
                    }
                }
            }
            old_string = new_string;

            old_data = new Vector();
            for(int i=0;i<count_header;i++){
               old_data.add((String) jTable1.getValueAt(old_string,i)); 
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

// delete  button
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        if(show_button){
            try {
                int index_deleted = jTable1.getSelectedRow();
                String query = "DELETE FROM `" + jComboBox1.getSelectedItem() + "` WHERE ", name;
                for(int i =0; i< count_header; i++){
                    query = query + (String)headerVect.get(i)+" = '"+(String) jTable1.getValueAt(index_deleted,i)+"'";
                    if(i+1<count_header)
                         query = query +" and ";
                }
                query = query +";";
                boolean rs = stmt.execute(query);
                mod.removeRow(index_deleted);
            } catch (SQLException ex) {
                //Logger.getLogger(main_interface.class.getName()).log(Level.SEVERE, null, ex);
                JFrame frame = new JFrame("JOptionPane showMessageDialog example");
                JOptionPane.showMessageDialog(frame,"Error 007: "+ex);
            }
        }
    }//GEN-LAST:event_jButton7ActionPerformed

// update and add new records (button)
    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
            new_string = jTable1.getSelectedRow();
            new_data = new Vector();
            for(int i=0;i<count_header;i++){
               new_data.add((String) jTable1.getValueAt(old_string,i)); 
            }
            boolean go_request = false;
            for(int i = 0; i<count_header;i++ ){
                if(!new_data.get(i).equals(old_data.get(i))){
                    go_request=true;
                    break;
                }
            }
            if(go_request){
                try {
                    if(addNewString && old_string == jTable1.getRowCount()-1 ){
                        String query = "INSERT INTO `" + jComboBox1.getSelectedItem() + "` ( ", name;
                        for(int i =0; i< count_header; i++){
                            query = query + (String)headerVect.get(i);
                            if(i+1<count_header)
                                 query = query +", ";
                        }
                        query = query +") VALUES ( ";
                        for(int i =0; i< count_header; i++){
                            query = query + "'"+(String)new_data.get(i)+"'";
                            if(i+1<count_header)
                                 query = query +" , ";
                        }
                        query = query +");";
                        boolean rs = stmt.execute(query);
                        addNewString = false;
                        jButton6.setEnabled(true);
                        System.out.println(rs);
                    }else{
                        String query = "update `" + jComboBox1.getSelectedItem() + "` set ", name;
                        for(int i =0; i< count_header; i++){
                            query = query + (String)headerVect.get(i)+" = '"+(String)new_data.get(i)+"'";
                            if(i+1<count_header)
                                 query = query +", ";
                        }
                        query = query +" where ";
                        for(int i =0; i< count_header; i++){
                            query = query + (String)headerVect.get(i)+" = '"+(String)old_data.get(i)+"'";
                            if(i+1<count_header)
                                 query = query +" and ";
                        }
                        query = query +";";
                        int rs = stmt.executeUpdate(query);
                        System.out.println("rs="+rs);
                    }
                } catch (SQLException ex) {
                    JFrame frame = new JFrame("JOptionPane showMessageDialog example");
                    JOptionPane.showMessageDialog(frame,"Error 001: "+ex);
                    // return correct values
                    for(int i=0;i<count_header;i++){
                        jTable1.setValueAt(old_data.get(i), old_string, i);
                    }

                }
            }
            old_string = new_string;
            old_data = new Vector();
            for(int i=0;i<count_header;i++){
               old_data.add((String) jTable1.getValueAt(old_string,i)); 
            }       
    }//GEN-LAST:event_jTable1KeyReleased

// reload new lines in table (wheel)
    private void jTable1MouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_jTable1MouseWheelMoved
        if(show_button){
            int position = jScrollPane3.getViewport().getViewPosition().y;
            int max_position = jTable1.getHeight() - 403; // minus border
            if(max_position == position){
                System.out.println("yes");
                try {
                    JViewport v = jScrollPane3.getViewport();
                    jScrollPane3.setViewport(v);

                    String query = "select * from " + jComboBox1.getSelectedItem() 
                            + " LIMIT "+start_lim+","+Limit+";", name;
                    ResultSet rs = stmt.executeQuery(query);

                    while (rs.next()) {                                                 // get data
                        Vector<String> newRow = new Vector<>();
                        for(int i = 1; i< count_header+1; i++){
                            newRow.add(rs.getString(i));                                // create string
                        }
                        mod.addRow(newRow);                                             // add string
                    }

                    // start init for table 
                    jTable1 .getSelectionModel().setSelectionInterval(0, 0);            // choose fisrt string
                    old_data = new Vector();
                    for(int i=0;i<count_header;i++){                                    // save context for first string
                       old_data.add((String) jTable1.getValueAt(old_string,i)); 
                    }
                    start_lim = start_lim + Limit;
                } catch (SQLException ex) {
                    JFrame frame = new JFrame("JOptionPane showMessageDialog example");
                    JOptionPane.showMessageDialog(frame,"Error 009: "+ex);
                }
            }
        }
    }//GEN-LAST:event_jTable1MouseWheelMoved

// reload new lines in table (drag)
    private void jTable1ComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTable1ComponentMoved
        if(show_button){
            int position = jScrollPane3.getViewport().getViewPosition().y;
            int max_position = jTable1.getHeight() - 403; // minus border
            if(max_position == position){
                try {
                    JViewport v = jScrollPane3.getViewport();
                    //jScrollPane3.getViewport().getViewPosition().y = jScrollPane3.getViewport().getViewPosition().y -10;
                    jScrollPane3.setViewport(v);

                    String query = "select * from " + jComboBox1.getSelectedItem() 
                            + " LIMIT "+start_lim+","+Limit+";";
                    ResultSet rs = stmt.executeQuery(query);

                    while (rs.next()) {                                                 // get data
                        Vector<String> newRow = new Vector<>();
                        for(int i = 1; i< count_header+1; i++){
                            newRow.add(rs.getString(i));                                // create string
                        }
                        mod.addRow(newRow);                                             // add string
                    }

                    // start init for table 
                    jTable1 .getSelectionModel().setSelectionInterval(0, 0);            // choose fisrt string
                    old_data = new Vector();
                    for(int i=0;i<count_header;i++){                                    // save context for first string
                       old_data.add((String) jTable1.getValueAt(old_string,i)); 
                    }
                    start_lim = start_lim + Limit;
                } catch (SQLException ex) {
                    JFrame frame = new JFrame("JOptionPane showMessageDialog example");
                    JOptionPane.showMessageDialog(frame,"Error 009: "+ex);
                }
            }
        }else{
            int position = jScrollPane3.getViewport().getViewPosition().y;
            int max_position = jTable1.getHeight() - 403; // minus border
            if(max_position == position){
                try {
                     start_lim = start_lim + Limit;
                    String query = "select *, 'KEYTABLE', 'KEYWORD' from "+jComboBox1.getSelectedItem()+" where concat("
                                + header_slave_table+") like '%"+jTextField2.getText()+"%' LIMIT "+start_lim+","+Limit+" ";
                    String header_slave_table = "";
                    for(int i = 0 ; i<external_keys_vec.size();i++){
                        header_slave_table = "";
                        // get header columns
                        ResultSet header = dbmd.getColumns(null, null, external_keys_vec.get(i+1), null);
                        while (header.next()) {
                            header_slave_table = header_slave_table + "T2."+header.getString(4);
                            if(header.next())    // if not last element, add ","
                               header_slave_table = header_slave_table+","; 
                            header.previous();
                        }

                        // Keyword searching in neighboring tables
                        query = query +  " UNION select T1.*,'"+external_keys_vec.get(i+1)+"', "
                                + "concat_ws('=','"+external_keys_vec.get(i+2)+"',T2."+external_keys_vec.get(i+2)+
                                 ") from "+jComboBox1.getSelectedItem()+ " as T1\n" +
                                 "inner join " + external_keys_vec.get(i+1)+ " as T2 on concat"
                                + "(" + header_slave_table + ") like '%"+jTextField2.getText()+"%'\n" +
                                 "where T1."+external_keys_vec.get(i)+" = T2."+external_keys_vec.get(i+2) +  " LIMIT "+start_lim+","+Limit;
                        i=i+2;
                    }  
                    query = query + ";";
                    System.out.println("!!!!");
                    System.out.println(query);
                    ResultSet slave = stmt.executeQuery(query);
                    while (slave.next()) {                              // get data
                        Vector<String> newRow = new Vector<>();
                        for(int j = 1; j< count_header+3; j++){
                            newRow.add(slave.getString(j));             // create string
                        }
                        mod.addRow(newRow);                             // add string
                    }
                } catch (SQLException ex) {
                    JFrame frame = new JFrame("JOptionPane showMessageDialog example");
                    JOptionPane.showMessageDialog(frame,"Error 012: "+ex);
                }
            }
        }
    }//GEN-LAST:event_jTable1ComponentMoved

// okey Google
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        old_string = 0;
        show_button = false;
        jButton4.setEnabled(false);
        jButton6.setEnabled(false);
        jButton7.setEnabled(false); 
        jButton8.setEnabled(true); 
        String query;
        try {
            header_slave_table = "";
            headerVect = new Vector<>();
             
            // get the headerlines of the main table
            ResultSet header_main = dbmd.getColumns(null, null, (String) jComboBox1.getSelectedItem(), null);
            count_header = 0;
            while (header_main.next()) {
                headerVect.add(header_main.getString(4));
                header_slave_table = header_slave_table +header_main.getString(4);
                count_header++;
                if(header_main.next())    // if not last element, add ","
                   header_slave_table = header_slave_table+","; 
                header_main.previous();
            }
            headerVect.add("KEYTABLE");
            headerVect.add("KEYWORD");
            mod = new DefaultTableModel(headerVect, 0);                             // set header
            jTable1.setModel(mod);                                                  // update table
            
            // hide columns of the support
            jTable1.getColumnModel().getColumn(count_header).setMinWidth(0);
            jTable1.getColumnModel().getColumn(count_header).setMaxWidth(0);
            jTable1.getColumnModel().getColumn(count_header).setPreferredWidth(0);
            jTable1.getColumnModel().getColumn(count_header).setResizable(false);
            jTable1.getColumnModel().getColumn(count_header+1).setMinWidth(0);
            jTable1.getColumnModel().getColumn(count_header+1).setMaxWidth(0);
            jTable1.getColumnModel().getColumn(count_header+1).setPreferredWidth(0);
            jTable1.getColumnModel().getColumn(count_header+1).setResizable(false);

            // get external_keys
            query = "SELECT COLUMN_NAME as master_col, REFERENCED_TABLE_NAME as name_slave, "
                    + "REFERENCED_COLUMN_NAME as slave_col" +
                    " FROM information_schema.KEY_COLUMN_USAGE\n" +
                    "WHERE TABLE_SCHEMA ='"+jTextField3.getText()+"' AND TABLE_NAME ='"+
                    jComboBox1.getSelectedItem() +"' AND\n" +
                    "CONSTRAINT_NAME <>'PRIMARY' AND REFERENCED_TABLE_NAME is not null;"; 
            ResultSet external_keys = stmt.executeQuery(query);
            external_keys_vec = new Vector<>();
             while (external_keys.next()) {
                external_keys_vec.add(external_keys.getString(1));   // master_col
                external_keys_vec.add(external_keys.getString(2));   // name_slave
                external_keys_vec.add(external_keys.getString(3));   // slave_col
             }
             
             
            query = "select *, 'KEYTABLE', 'KEYWORD' from "+jComboBox1.getSelectedItem()+" where concat("
                        + header_slave_table+") like '%"+jTextField2.getText()+"%' LIMIT 0,"+Limit+" ";
            String header_slave_table = "";
             for(int i = 0 ; i<external_keys_vec.size();i++){
                header_slave_table = "";
                // get header columns
                ResultSet header = dbmd.getColumns(null, null, external_keys_vec.get(i+1), null);
                while (header.next()) {
                    header_slave_table = header_slave_table + "T2."+header.getString(4);
                    if(header.next())    // if not last element, add ","
                       header_slave_table = header_slave_table+","; 
                    header.previous();
                }

                // Keyword searching in neighboring tables
                query = query +  " UNION select T1.*,'"+external_keys_vec.get(i+1)+"', "
                        + "concat_ws('=','"+external_keys_vec.get(i+2)+"',T2."+external_keys_vec.get(i+2)+
                         ") from "+jComboBox1.getSelectedItem()+ " as T1\n" +
                         "inner join " + external_keys_vec.get(i+1)+ " as T2 on concat"
                        + "(" + header_slave_table + ") like '%"+jTextField2.getText()+"%'\n" +
                         "where T1."+external_keys_vec.get(i)+" = T2."+external_keys_vec.get(i+2) +  " LIMIT 0,"+Limit;
                i=i+2;
            }  
            query = query + ";";
            System.out.println(query);
            ResultSet slave = stmt.executeQuery(query);
            while (slave.next()) {                              // get data
                Vector<String> newRow = new Vector<>();
                for(int j = 1; j< count_header+3; j++){
                    newRow.add(slave.getString(j));             // create string
                }
                mod.addRow(newRow);                             // add string
            }

            // start init for table 
            jTable1 .getSelectionModel().setSelectionInterval(0, 0);            // choose fisrt string
            old_data = new Vector();
            for(int i=0;i<count_header;i++){                                    // save context for first string
               old_data.add((String) jTable1.getValueAt(old_string,i)); 
            }
        } catch (SQLException ex) {
            JFrame frame = new JFrame("JOptionPane showMessageDialog example");
            JOptionPane.showMessageDialog(frame,"Error 010: "+ex);
           // Logger.getLogger(main_interface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

// showing line in the dependent table
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
       if(!jTable1.getValueAt(new_string,count_header).equals("KEYTABLE")){
            JFrame dependent_window = new JFrame("dependent_window");
            try {
                // give headerline of the dependent table
                ResultSet rs4 = dbmd.getColumns(null, null, (String) jTable1.getValueAt(new_string,count_header), null);
                int d_header = 0;
                Vector <String> header = new Vector();
                Vector <String> lines = new Vector();
                while (rs4.next()) {
                    header.add(rs4.getString(4));                                // save header
                    d_header++;                                                  // header count
                }
                String query = "select * from " + (String) jTable1.getValueAt(new_string,count_header) 
                        + " where "+(String) jTable1.getValueAt(new_string,count_header+1)+";";
                System.out.println(query);
                ResultSet rs = stmt.executeQuery(query);

                while (rs.next()) {                                                 // get data
                    for(int i = 1; i< d_header+1; i++){
                        lines.add(rs.getString(i));                                // create string
                    }                                           // add string
                }
                JTable jTable2 = new JTable(0,0);
                DefaultTableModel mod2 = new DefaultTableModel(header, 0); // set header
                jTable2.setModel(mod2);                                                  // update table
                mod2.addRow(lines);                                             // add string
                //открываем вторую
                JScrollPane scrollPane = new JScrollPane(jTable2);
                dependent_window.getContentPane().add(scrollPane);
                dependent_window.setPreferredSize(new Dimension(860,150));
                dependent_window.pack();
                dependent_window.setLocationRelativeTo(null);
                dependent_window.setVisible(true);
                jTable2.setEnabled(false);
                    // get header columns
            } catch (SQLException ex) {
                Logger.getLogger(main_interface.class.getName()).log(Level.SEVERE, null, ex);
            }
       }else{
            JFrame frame = new JFrame("JOptionPane showMessageDialog example");
            JOptionPane.showMessageDialog(frame,"Keyword in this line");
       }
       
    }//GEN-LAST:event_jButton8ActionPerformed

public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main_interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main_interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main_interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main_interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
            new main_interface().setVisible(true);
        }
    });
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
